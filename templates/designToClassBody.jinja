{% set this = designInspector.objectify_class(className) %}


#include <iostream>
#include <{{className}}.h>
#include <uaclient/uasession.h>
#include <stdexcept>
#include <{{namespace}}ArrayTools.h>
#include <{{namespace}}UaoExceptions.h>

namespace {{namespace}}
{


{{className}}::
{{className}}
(
    UaSession* session,
    UaNodeId objId
    ) :
    m_session(session),
    m_objId (objId)
    {
    
    }	



{% for cv in designInspector.objectify_cache_variables(className) %}
	{{readPronouncement(className, cv.get('name'), cv.get('dataType'))}}
	{% if cv.get('addressSpaceWrite') != 'forbidden' %}

		{{writePronouncement(className, cv.get('name'), cv.get('dataType'))}}
	{% endif %}
{% endfor %}
{% for sv in this.sourcevariable %}
	{% if sv.get('addressSpaceRead') != 'forbidden' %}
		{{readPronouncement(className, sv.get('name'), sv.get('dataType'))}}
	{% endif %}
	{% if sv.get('addressSpaceWrite') != 'forbidden' %}

		{{writePronouncement(className, sv.get('name'), sv.get('dataType'))}}
	{% endif %}
{% endfor %}

{% for m in this.method %}
{% set allArgsLen = m.argument|length + m.returnvalue|length %}
	void {{className}}::{{m.get('name')}} (
	{% for arg in m.argument %}
		{{oracle.fix_data_type_passing_method(arg.get('dataType'), arg.array|length>0 )}} in_{{arg.get('name')}}
    	{%- if loop.index < allArgsLen %},
    	{% endif %}
	{% endfor %}
	{% for rv in m.returnvalue %}
    	{{oracle.quasar_data_type_to_cpp_type(rv.get('dataType'), rv.array|length>0 )}}& out_{{rv.get('name')}}
    	{%- if not loop.last %},
    	{% endif %}
    {% endfor %}
	
	)
	{

		ServiceSettings serviceSettings;
		CallIn callRequest;
		CallOut co;
		
		callRequest.objectId = m_objId;
		callRequest.methodId = UaNodeId( UaString(m_objId.identifierString()) + UaString(".{{m.get('name')}}"), 2 );


		UaVariant v;


		{% if m.argument|length>0 %}
			callRequest.inputArguments.create( {{m.argument|length}} );
			{% for arg in m.argument %}
				{% if arg.array|length>0 %}
					in_{{arg.get('name')}}
					{{oracle.vector_to_uavariant_function(arg.get('dataType'))}}
				{% elif arg.get('dataType') == 'UaByteString' %}

					v.setByteString( const_cast<UaByteString&>(in_{{arg.get('name')}}), false );
				{% else %}

					v.{{oracle.data_type_to_variant_setter(arg.get('dataType'))}}( in_{{arg.get('name')}} );
				{% endif %}



				v.copyTo( &callRequest.inputArguments[ {{m.argument|length - 1}} ] );
			{% endfor %}
		{% endif %}



		UaStatus status =
		m_session->call(
				serviceSettings,
				callRequest,
				co
			);
		if (status.isBad())
			throw Exceptions::BadStatusCode("In OPC-UA call", status.statusCode());
		
		{% for rv in m.returnvalue %}

			v = co.outputArguments[{{m.argument|length - 1}}];

			{% if rv.array|length>0 %}
				{{oracle.uavariant_to_vector_function(rv.get('dataType'))}}
			{% else %}
				v.{{oracle.data_type_to_variant_converter(rv.get('dataType'))}} (out_{{rv.get('name')}});
			{% endif %}
		{% endfor %}



	}


{% endfor %}

}



